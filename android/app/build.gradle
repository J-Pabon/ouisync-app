def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('../secrets/android/key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    lintOptions {
        checkReleaseBuilds false
    }

    // Fix for:
    //
    // Inconsistent JVM-target compatibility detected for tasks 'compileDebugJavaWithJavac'
    // (1.8) and 'compileDebugKotlin' (17).
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlin {
        jvmToolchain(17)
    }

    compileSdkVersion 34

    // At time of writing, this is the LTS version
    ndkVersion '26.3.11579264'

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    def appId = "org.equalitie.ouisync_app"

    // Suffix to append to the application id, name and version. This allows installing multiple
    // versions of the app on the same device (e.g., production and development).
    def appSuffix = System.getenv("APP_SUFFIX") ?: localProperties.getProperty("app.suffix")

    defaultConfig {
        applicationId appId
        namespace appId
        resValue "string", "app_name", "Ouisync"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        if (appSuffix != null) {
            applicationIdSuffix = ".$appSuffix"
            versionNameSuffix = "-$appSuffix"
            resValue "string", "app_name", "Ouisync $appSuffix"
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }

        debug {
            android.packagingOptions.doNotStrip "**.so"
        }
    }
    // namespace 'org.equalitie.ouisync_app'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'

}
