name: CI

on: 
  push:
    #branches: [master]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [master]

  workflow_dispatch:

jobs:
  build_and_test:
    name: OuiSync Flutter App - Android
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Adding Android Platform target
        run: |
         echo "Adding target: x86_64-linux-android"
         rustup target add x86_64-linux-android
        # For each additional platform supported, you can add the `target` by using the corresponding target triple.
        # To get a list of all available triples, run `rust target list`
      - name: Building OuiSync library  
        run: |
         cd ouisync-plugin/ouisync
         cargo build --release --lib
      - name: Generating Rust FFI bindings for the library, to be used in the OuiSync plugin.
        run: |
         cd ouisync-plugin/ouisync
         cargo run --bin bindgen
      - name: Creating a symlink to the library binary for the Flutter tests
        run: |
         mkdir -p /Users/runner/work/ouisync-app/ouisync-app/build/test
         ln -s /Users/runner/work/ouisync-app/ouisync-app/ouisync-plugin/ouisync/target/release/libouisync.dylib /Users/runner/work/ouisync-app/ouisync-app/build/test
      - name: Setting up the Android NDK environment 
        uses: nttld/setup-ndk@v1
        with:
            ndk-version: r21e
        # Note: we should be able to get the NDK directory value from
        #
        # ${{ steps.setup-ndk.outputs.ndk-path }}
        #
        # as described here
        #
        # https://github.com/marketplace/actions/setup-android-ndk
        #
        # but that doesn't seem to work.
      - name: Setting the directory for the Android NDK in `android/local.properties`
        run: echo "ndk.dir=$(dirname $(which ndk-build))" >> android/local.properties
      - name: Setting the ABI filter for building only for x86_64 architecture in `android/local.properties`
        run: echo "ndk.abiFilters=x86_64" >> android/local.properties
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '2.10.5'
      - name: Getting Flutter packages (App)
        run: flutter pub get
      - name: Getting Flutter packages (Plugin) and generating the Dart bindings for the OuiSync plugin (from the Rust FFI bindings for OuiSync library)
        run: |
         cd ouisync-plugin
         flutter pub get
         flutter pub run ffigen
      - run: flutter test
      - name: Building APK
        run: flutter build apk
